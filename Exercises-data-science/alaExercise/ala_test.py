# -*- coding: utf-8 -*-
"""alaTest.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13hclkYz3vh4XRB1OWaLZYYM88qeyoTLY

###Goal
- higher number per operator first then
- cheaper per operator

## ALGORITHM


- order by highest number per operator
- break if found large number at starting per operator
- select cheap operator among highest number preference cost
"""

opA = {
    1: 0.9,
    268: 5.1,
    46: 0.17,
    4620: 0.0,
    468: 0.15,
    4631: 0.15,
    4673: 0.9,
    46732: 1.1
}

opB = {
    1: 0.92,
    44: 0.5,
    46: 0.2,
    467: 1.0,
    48: 1.2
}
def routing_price(num):
    #num=4673212345
    num=str(num)
    price_A=-1
    #find from largest and break since largest is preference on starting end
    for k in sorted(opA,reverse=True):
      if num.find(str(k))==0:
        price_A=opA[k]
        # print(price_A)
        break

    price_B=-1
    #find largest for second operator
    for k in sorted(opB,reverse=True):
      if num.find(str(k))==0:
        price_B=opB[k]
        # print(price_B)
        break

#compare the operator prices and choose best operator
    if price_A==-1 and price_B==-1:
      print("No operator available")
      return 4
    elif price_A>price_B:
      print("Operator B is cheaper")
      return 1
    elif price_A<price_B:
      print("Operator A is cheaper")
      return 2
    else:
      print("Operator A and B are cheaper-same price")
      return 3

if __name__ == '__main__':
    while True:
        num = input('Please input your number: ')
        routing_price(num)
